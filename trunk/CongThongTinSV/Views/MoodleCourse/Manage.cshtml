@using Kendo.Mvc.UI;
@using CongThongTinSV.Models;
@{
    ViewBag.Title = "Quản lý lớp học phần trên Moodle";
}

@(Html.Kendo().DropDownList()
    .Name("HocKy")
    .OptionLabel("Chọn học kỳ")
    .HtmlAttributes(new {style="width:180px"})
    .DataTextField("Text")
    .DataValueField("Value")
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Action("GetSemesterList", "MoodleCategory");
        }).ServerFiltering(true);
    })
    .Events(e =>
    {
        e.Change("loadGrid");
    })
)
@*<button id="create_top" class="k-button" onclick="Create()">Tạo lớp học phần</button>
<button id="delete_top" class="k-button" onclick="Delete()">Xóa lớp học phần</button>*@
@(Html.Kendo().Grid<CongThongTinSV.Models.MoodleCourse>()
    .Name("Grid")
    .Columns(columns => {
        columns.Bound(c => c.ID)
            .ClientTemplate("<input type='checkbox' class='chkbx' value='#= ID #'/>")
            .HeaderTemplate("<input type='checkbox' id='masterCheckBox'/>")
            .Width(40)
            .Title("")
            .IncludeInMenu(false)
            .HeaderHtmlAttributes(new { style = "text-align:center" })
            .HtmlAttributes(new { style = "text-align:center" })
            .Filterable(false).Groupable(false).Sortable(false);
        columns.Bound(c => c.Lop_hoc_phan)
              .ClientTemplate(
              "# if (Trang_thai) { #" +
                (@Html.ActionLink("#=Lop_hoc_phan#", "QuizList", "MoodleQuiz", new { courseid = "ID" }, new { title = "Xem danh sách các bài thi" }).ToHtmlString().Replace("ID", "#=ID_moodle#")) + 
              "# } else { ##=Lop_hoc_phan## } #"
              );
        columns.Bound(c => c.Ky_hieu).Width(95).HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.So_tin_chi).Width(95).HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.Tu_ngay).Width(100).Format("{0:dd-MM-yyyy}").HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.Den_ngay).Width(100).Format("{0:dd-MM-yyyy}").HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.ID_moodle).Title("Xem")
          .HeaderHtmlAttributes(new { style = "text-align:center" })
          .HtmlAttributes(new { style = "text-align:center" })
          .Filterable(false)
          .Groupable(false)
          .Sortable(false)
          .Width(90)
          .ClientTemplate(
           "# if (Trang_thai) { #" +
            (@Html.ActionLink("Bảng điểm", "CourseStudentGrade", "MoodleCourse", new { courseid = "ID" }, null).ToHtmlString().Replace("ID", "#=ID_moodle#")) +
        "# } #");
       columns.Bound(c => c.Trang_thai).Title("Thực hiện").Width(100)
       .ClientTemplate(
          "# if (Trang_thai) { #" +
            "<img class='image_check' src=" + Url.Content("~/Images/check.png") + " alt='Ok' title='Đã tạo' />" +
            "<button class='button-delete' title='Xóa lớp học phần' onclick='delete_one(#=ID#)'></button>" +
          "# } else { #" +
            "<button class='button-add' title='Tạo lớp học phần' onclick='create_one(#=ID#)'></button>" +
          "# } #");  
    })
    .Pageable(pager => pager.PageSizes(new int[]{5, 10, 20, 50, 100, 1000}).Refresh(true).Input(true).Numeric(false).Messages(m =>{ m.ItemsPerPage("dòng mỗi trang"); m.First("Trang đầu tiên"); m.Last("Trang cuối cùng"); m.Next("Trang sau"); m.Previous("Trang trước"); m.Refresh("Làm mới");}))
        .Sortable(s => s.SortMode(GridSortMode.SingleColumn))
    .Filterable()
    .Scrollable()
    .Groupable()
    .Resizable(r => r.Columns(true))
    .Reorderable(ro => ro.Columns(true))
    .Navigatable()
    //.ColumnMenu(menu => menu.Enabled(true).Sortable(false))
    //.Selectable(s => s.Mode(GridSelectionMode.Single))
    //.HtmlAttributes(new {style = "height:auto"})
    .Events(e => {
                e.DataBound("onDataBound");
            })
    .DataSource(
        dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("GetCourses", "MoodleCourse").Data("filterGrid"))
            .PageSize(50)
    )
)
<div>
    <button id="create_bottom" class="k-button" onclick="Create()">Tạo lớp học phần</button>
    <button id="delete_bottom" class="k-button" onclick="Delete()">Xóa lớp học phần</button>
</div>
<script type="text/javascript">
    var selectedVals = [];

    function filterGrid() {
        return {
            id_hocky: $("#HocKy").val()
        }
    }

    function loadGrid() {
        selectedVals.splice(0, selectedVals.length);
        gridRefresh();
    }
    // on data bound, check checkboxes
    function onDataBound(e) {
        checkCells(selectedVals, '#masterCheckBox', '#Grid :checkbox');
        resizeGrid("#Grid");
    }
    // on click checkbox cell in a row
    $(function () {
        $('#Grid').on('click', '.chkbx', function () {
            var state = $(this).is(':checked');
            var grid = $('#Grid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            checkVal(dataItem.ID, state, selectedVals);
            $('#masterCheckBox').attr('checked', isCheckedAll('#Grid :checkbox'));
        })
    })
    $('#masterCheckBox').click(function () { checkAll(this, '#Grid :checkbox'); })

    function gridRefresh() {
        $("#Grid").data("kendoGrid").dataSource.read();
    }

    function create_one(selectedVal) {
        var action = '@Url.Action("CreateCourses", "MoodleCourse")' + '/?id_hocky=' + jQuery("#HocKy").val() + '&selectedVals=' + selectedVal;
        processing(action, "Đang tạo lớp học phần...", gridRefresh);
    }

    function delete_one(selectedVal) {
        if (confirm('Bạn muốn xóa lớp học phần này?')) {
            var action = '@Url.Action("DeleteCourses","MoodleCourse")' + '/?id_hocky=' + jQuery("#HocKy").val() + '&selectedVals=' + selectedVal;
            processing(action, "Đang xóa lớp học phần...", gridRefresh);
        }
    }

    function Create() {
        if (selectedVals.length == 0) {
            alert('Vui lòng chọn một lớp học phần!');
            return;
        }
        var action = '@Url.Action("CreateCourses", "MoodleCourse")' + '/?id_hocky=' + jQuery("#HocKy").val() + '&selectedVals=' + selectedVals;
        processing(action, "Đang tạo các lớp học phần...", gridRefresh);
    }

    function Delete() {
        if (selectedVals.length == 0) {
            alert('Vui lòng chọn một lớp học phần!');
            return;
        }

        if (confirm('Bạn muốn xóa toàn bộ các lớp học phần đã chọn?')) {
            var action = '@Url.Action("DeleteCourses","MoodleCourse")' + '/?id_hocky=' + jQuery("#HocKy").val() + '&selectedVals=' + selectedVals;
            processing(action, "Đang xóa các lớp học phần...", gridRefresh);
        }
    }
</script>