@using CongThongTinSV.Models;
@{
    ViewBag.Title = "Quản lý tài khoản sinh viên trên Moodle";
}

@(Html.Kendo().ComboBox()
    .Name("ChuyenNganh")
    .Placeholder("Chọn chuyên ngành...")
    .HtmlAttributes(new {style="width:260px"})
    .DataTextField("Text")
    .DataValueField("Value")
        //.SelectedIndex(0)
    .DataSource(source =>
    {
        source.Read(read =>
        {
            read.Action("GetChuyenNganh", "ChuyenNganh");
        }).ServerFiltering(true);
    })
    .Events(e =>
    {
        e.Change("loadGrid");
    })
    //.HtmlAttributes(new { style = "display: block;"})
)
<button id="exportToExcel" class="k-button" onclick="exportToExcel()">Xuất ra Excel</button>
@*<button id="create_top" class="k-button" onclick="create_stu()">Đăng ký tài khoản</button>
<button id="delete_top" class="k-button" onclick="delete_stu()">Hủy đăng ký</button> 
<button id="update_top" class="k-button" onclick="update_stu()">Khôi phục về mặc định</button>
<button id="sync_top" class="k-button" onclick="sync_stu()">Đồng bộ tài khoản</button>*@
@(Html.Kendo().Grid<CongThongTinSV.Models.MoodleStudent>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(c => c.ID_sv)
            .ClientTemplate("<input type='checkbox' class='chkbx' value='#= ID_sv #'/>")
            .HeaderTemplate("<input type='checkbox' id='masterCheckBox'/>")
            .Width(50)
            .Title("")
            .HeaderHtmlAttributes(new { style = "text-align:center" })
            .HtmlAttributes(new { style = "text-align:center" })
            .Filterable(false).Groupable(false).Sortable(false)
            .IncludeInMenu(false);
        columns.Bound(c => c.Ma_sv).ClientTemplate(
            "# if (ID_moodle != 0) { #" +
            (@Html.ActionLink("#=Ma_sv#", "UserProfile", "MoodleUser", new { userid = "UserId" }, new { title = "Xem hồ sơ cá nhân" }).ToHtmlString().Replace("UserId", "#=ID_moodle#")) +
            "# } else { ##=Ma_sv#" +
            "# } #")
            .HtmlAttributes(new { style = "text-align:center" })
            .Width(85);
        columns.Bound(c => c.Ho_dem).Width(150);
        columns.Bound(c => c.Ten).Width(80);
        columns.Bound(c => c.Ngay_sinh).Width(100).Format("{0:dd-MM-yyyy}").HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.Gioi_tinh).Width(90);
        columns.Bound(c => c.Lop).Width(90).HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.ID_moodle).Width(115).Title("Xem")
            .Filterable(false)
            .Groupable(false)
            .Sortable(false)
            .IncludeInMenu(false)
            .HeaderHtmlAttributes(new { style = "text-align:center" })
            .HtmlAttributes(new { style = "text-align:center" })
            .ClientTemplate(
                "# if (Trang_thai) { #" +
                    (@Html.ActionLink("Các khóa học", "StudentCourseGrade", "MoodleCourse", new { userid = "UserId" }, null).ToHtmlString().Replace("UserId", "#=ID_moodle#")) +
                "# } #");
        columns.Bound(c => c.Trang_thai).Title("Thực hiện")
            .IncludeInMenu(false)
            .ClientTemplate(
            "# if (Trang_thai) { #" +
                "<button class='button-delete' title='Hủy đăng ký' onclick='delete_one(#=ID_sv#)'></button>" +
                "<button class='button-update' title='Khôi phục về mặc định' onclick='update_one(#=ID_sv#)'></button>" +
                "# } else { #" +
                "<button class='button-add' title='Đăng ký' onclick='create_one(#=ID_sv#)'></button>" +
            "# } #");
    })
    .Pageable(pager => pager.PageSizes(new int[] { 5, 10, 20, 50, 100, 1000 }).Refresh(true).Input(true).Numeric(false).Messages(m =>
    {
        m.ItemsPerPage("dòng mỗi trang");
        m.First("Trang đầu tiên");
        m.Last("Trang cuối cùng");
        m.Next("Trang sau");
        m.Previous("Trang trước");
        m.Refresh("Làm mới");
    }))
    .Sortable(s => s.SortMode(GridSortMode.SingleColumn))
    .Filterable()
    .Scrollable()
    .Groupable()
    .Resizable(r => r.Columns(true))
    .Reorderable(ro => ro.Columns(true))
    .Navigatable()
    .HtmlAttributes(new { style = "height:400px" })
    .ColumnMenu(menu => menu.Enabled(true).Sortable(false))
        //.Selectable(s => s.Mode(GridSelectionMode.Single))
    .Events(e =>
    {
        e.DataBound("onDataBound");
    })
    .DataSource(
        dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("GetStudents", "MoodleUser").Data("filterGrid"))
            .PageSize(50)
    )
        //.ToolBar(toolbar => toolbar.Custom().Text("Xuất ra excel").Url("#").HtmlAttributes(new { onclick = "exportToExcel()", style = "float:right;" }))
)
<div>
    <button id="create_bottom" class="k-button" onclick="create_stu()">Đăng ký tài khoản</button>
    <button id="delete_bottom" class="k-button" onclick="delete_stu()">Hủy đăng ký</button> 
    <button id="update_bottom" class="k-button" onclick="update_stu()">Khôi phục về mặc định</button>
    <button id="sync_bottom" class="k-button" onclick="sync_stu()">Đồng bộ tài khoản</button>
</div>

<script type="text/javascript">
    var selectedVals = [];
    var requestObject;

    function filterGrid() {
        return {
            id_chuyen_nganh: $("#ChuyenNganh").val()
        }
    }
    
    function loadGrid() {
        selectedVals.splice(0, selectedVals.length);
        gridRefresh();
    }
    // on data bound, check checkboxes
    function onDataBound(e) {
        checkCells(selectedVals, '#masterCheckBox', '#Grid :checkbox');
        // ask the parameterMap to create the request object for you
        var grid = $('#Grid').data('kendoGrid');
        requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });
    }
    // on click checkbox cell in a row
    $(function () {
        $('#Grid').on('click', '.chkbx', function () {
            var state = $(this).is(':checked');
            var grid = $('#Grid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            checkVal(dataItem.ID_sv, state, selectedVals);
            $('#masterCheckBox').attr('checked', isCheckedAll('#Grid :checkbox'));
        })
    })

    $('#masterCheckBox').click(function () { checkAll(this, '#Grid :checkbox'); })

    function gridRefresh() {
        $("#Grid").data("kendoGrid").dataSource.read();
    }

    function create_one(selectedVal) {
        var action = '@Url.Action("CreateStudents", "MoodleUser")' + '/?id_chuyen_nganh=' + jQuery("#ChuyenNganh").val() + '&selectedVals=' + selectedVal;
        processing(action, "Đang tạo tài khoản moodle elearning...", gridRefresh);
    }

    function delete_one(selectedVal) {
        if (confirm('Bạn muốn hủy đăng ký tài khoản moodle elearning của sinh viên này?')) {
            var action = '@Url.Action("DeleteStudents", "MoodleUser")' + '/?id_chuyen_nganh=' + jQuery("#ChuyenNganh").val() + '&selectedVals=' + selectedVal;
            processing(action, "Đang hủy đăng ký tài khoản moodle elearning...", gridRefresh);
        }
    }

    function update_one(selectedVal) {
        if (confirm('Bạn muốn khôi phục về mặc định tài khoản moodle elearning của sinh viên này?')) {
            var action = '@Url.Action("UpdateStudents", "MoodleUser")' + '/?id_chuyen_nganh=' + jQuery("#ChuyenNganh").val() + '&selectedVals=' + selectedVal;
            processing(action, "Đang khôi phục tài khoản moodle elearning...", gridRefresh);
        }
    }

    function create_stu() {
        if (selectedVals.length == 0) {
            alert('Vui lòng chọn một sinh viên!');
            return;
        }
        var action = '@Url.Action("CreateStudents", "MoodleUser")' + '/?id_chuyen_nganh=' + jQuery("#ChuyenNganh").val() + '&selectedVals=' + selectedVals;
        processing(action, "Đang tạo tài khoản moodle elearning...", gridRefresh);
    }

    function delete_stu() {
        if (selectedVals.length == 0) {
            alert('Vui lòng chọn một sinh viên!');
            return;
        }

        if (confirm('Bạn muốn hủy đăng ký tài khoản moodle elearning của các sinh viên đã chọn?')) {
            var action = '@Url.Action("DeleteStudents", "MoodleUser")' + '/?id_chuyen_nganh=' + jQuery("#ChuyenNganh").val() + '&selectedVals=' + selectedVals;
            processing(action, "Đang hủy đăng ký tài khoản moodle elearning...", gridRefresh);
        }
    }

    function update_stu() {
        if (selectedVals.length == 0) {
            alert('Vui lòng chọn một sinh viên!');
            return;
        }

        if (confirm('Bạn muốn khôi phục về mặc định tài khoản moodle elearning của các sinh viên đã chọn?')) {
            var action = '@Url.Action("UpdateStudents", "MoodleUser")' + '/?id_chuyen_nganh=' + jQuery("#ChuyenNganh").val() + '&selectedVals=' + selectedVals;
            processing(action, "Đang khôi phục tài khoản moodle elearning...", gridRefresh);
        }
    }

    function sync_stu() {
        var action = '@Url.Action("SyncStudents", "MoodleUser")' + '/?id_chuyen_nganh=' + jQuery("#ChuyenNganh").val();
        processing(action, "Đang đồng bộ tài khoản moodle elearning...", gridRefresh);
    }

    function exportToExcel() {
        //event.preventDefault();

        if (jQuery("#ChuyenNganh").val() == "") {
            alert('Vui lòng chọn một chuyên ngành!');
            return;
        }

        var dataFields = [];
        var dataTitles = [];

        getFieldAndTitles('#Grid .k-header', dataFields, dataTitles);
     
        document.location.href = '@Url.Action("ExportStudentToExcel", "MoodleUser")' + '/?sort=' + requestObject.sort + '&filter=' + requestObject.filter + '&datafields=' + dataFields + '&datatitles=' + dataTitles + '&id_chuyen_nganh=' + jQuery("#ChuyenNganh").val() + '&chuyen_nganh=' + $("#ChuyenNganh").data("kendoComboBox").text();
    };
</script>