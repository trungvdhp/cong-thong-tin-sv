@{
    ViewBag.Title = ViewBag.QuizName;
    string title = ViewBag.CourseName + " - " + ViewBag.QuizName;
}

<h2>@title</h2>
<button id="exportToExcel" class="k-button" onclick="exportToExcel()">Xuất ra Excel</button>
<button id="exportToPdf" class="k-button" onclick="exportToPdf()">Xuất ra Pdf</button>
<button id="report" class="k-button" onclick="report()">Xuất ra báo cáo</button>
@(Html.Kendo().Grid<CongThongTinSV.Models.MoodleQuizStudentGrade>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(c => c.ID)
            .ClientTemplate("<input type='checkbox' class='chkbx' value='#= ID #' title=''/>")
            .HeaderTemplate("<input type='checkbox' id='masterCheckBox'/>")
            .Width(50)
            .Title("")
            .IncludeInMenu(false)
            .HeaderHtmlAttributes(new { style = "text-align:center" })
            .HtmlAttributes(new { style = "text-align:center" })
            .Filterable(false).Groupable(false).Sortable(false);
        columns.Bound(c => c.Ma_sv).Width(75)
            .HtmlAttributes(new { style = "text-align:center" })
            .ClientTemplate(
                (@Html.ActionLink("#=Ma_sv#", "UserProfile", "MoodleUser", new { userid = "UserId" }, new { title = "Xem hồ sơ người dùng" }).ToHtmlString().Replace("UserId", "#=ID#")));
        columns.Bound(c => c.Ho_dem).Width(135);
        columns.Bound(c => c.Ten).Width(70);
        columns.Bound(c => c.Ngay_sinh).Width(95).Format("{0:dd-MM-yyyy}").HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.Lop).Width(85)
            .HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.DiemX).Format("{0:0.0}")
            .Width(45)
            .HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.DiemY_cu)
            .Format("{0:0.0}")
            .Width(60)
            .HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.DiemY_moi)
            .Format("{0:0.0}")
            .Width(70)
            .HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.DiemZ_moi)
            .Format("{0:0.0}")
            .Width(70)
            .HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.Diem_chu).Width(95);
        columns.Bound(c => c.Khac_diem).Title("Cập nhật")
            .IncludeInMenu(false)
            .ClientTemplate("<img width='16' height='16' src=" +
            "# if (Khac_diem) { #" +
                Url.Content("~/Images/warning.png") + " title='Điểm Y cũ và mới khác nhau' }" + 
            "# } else { #" +
                Url.Content("~/Images/ok-2.png") + " title='Điểm Y cũ và mới giống nhau' }" +
            "# } # />" +
            "# if (Khac_diem && ID_diem_thi != 0) { #" +
              "<button class='button-update' title='Cập nhật điểm' onclick='update_one(#=DiemY_moi#, #=ID_diem_thi#)'></button>" +
            "# } #"
            );
    })
    .Pageable(pager => pager.PageSizes(new int[] { 5, 10, 20, 50, 100 }).Refresh(true).Input(true).Numeric(false).Messages(m =>{ m.ItemsPerPage("dòng mỗi trang"); m.First("Trang đầu tiên"); m.Last("Trang cuối cùng"); m.Next("Trang sau"); m.Previous("Trang trước"); m.Refresh("Làm mới");}))
    .Sortable(s => s.SortMode(GridSortMode.MultipleColumn))
    .Filterable()
    .Scrollable()
    .Groupable()
    .Resizable(r => r.Columns(true))
    .Reorderable(ro => ro.Columns(true))
    .Navigatable()
    .HtmlAttributes(new { style="height:400px"})
    .ColumnMenu(menu => menu.Enabled(true).Sortable(false))
    //.Selectable(s => s.Mode(GridSelectionMode.Single))
    .Events(e =>
    {
        e.DataBound("onDataBound");
    })
    .DataSource(
        dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("GetQuizStudentGrades", "MoodleQuiz", new { quizid = ViewBag.QuizID }))
            .PageSize(50)
    )
    //.ToolBar(toolbar => toolbar.Custom().Text("Xuất ra excel").Url("#").HtmlAttributes(new { onclick = "exportToExcel()", style= "float:right;"}))
)
<div>
    <button id="updateMark" class="k-button">Cập nhật điểm thi</button>
</div>
<div style="text-align: center;margin-top: 10px;">
    <button class="k-button" type="submit" onclick="pageback()">Quay về danh sách các bài thi</button>
</div>
<script type="text/javascript">
    var selectedVals = [];
    var requestObject;

    //export to excel
    function exportToExcel() {
        document.location.href = '@Url.Action("ExportQuizGradeToExcel", "MoodleQuiz")' + '/?sort=' + requestObject.sort + '&filter=' + requestObject.filter + '&quizid=@ViewBag.QuizID' + '&courseid=@ViewBag.CourseID' + '&coursename=' + '@HttpUtility.UrlEncode(ViewBag.CourseName)';
    }

    //export to pdf
    function exportToPdf() {
        document.location.href = '@Url.Action("ExportQuizGradeToPdf", "MoodleQuiz")' + '/?sort=' + requestObject.sort + '&filter=' + requestObject.filter + '&quizid=@ViewBag.QuizID' + '&courseid=@ViewBag.CourseID' + '&coursename=' + '@HttpUtility.UrlEncode(ViewBag.CourseName)';
    }

    function report() {
        window.open('@Url.Action("ExportQuizGradeToReport", "MoodleQuiz")' + '/?quizid=@ViewBag.QuizID' + '&sort=' + requestObject.sort + '&filter=' + requestObject.filter);
    }

    function loadGrid() {
        selectedVals.splice(0, selectedVals.length);
        gridRefresh();
    }

    // on data bound, check checkboxes
    function onDataBound(e) {
        checkCells(selectedVals, '#masterCheckBox', '#Grid :checkbox');

        // ask the parameterMap to create the request object for you
        var grid = $('#Grid').data('kendoGrid');
        requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });
    }
    // on click checkbox cell in a row
    $(function () {
        $('#Grid').on('click', '.chkbx', function () {
            var state = $(this).is(':checked');
            var grid = $('#Grid').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));

            checkVal(dataItem.ID, state, selectedVals);
            $('#masterCheckBox').attr('checked', isCheckedAll('#Grid :checkbox'));
        })
    })

    $('#masterCheckBox').click(function () {
        checkAll(this, '#Grid :checkbox');
    })

    function gridRefresh() {
        $("#Grid").data("kendoGrid").dataSource.read();
    }

   function update_one(grade, id) {
        if (confirm('Bạn muốn cập nhật điểm mới cho học viên này?')) {
            var action = '@Url.Action("UpdateYGrade","MoodleQuiz")' + '/?newgrade=' + grade + '&id_diem_thi=' + id;
            processing(action, "Đang cập nhật điểm mới cho học viên...", gridRefresh);
        }
    }

    $("#updateMark").click(function () {
        if (selectedVals.length == 0) {
            alert('Vui lòng chọn một học viên!');
            return;
        }

        if (confirm('Bạn muốn cập nhật điểm mới cho các học viên đã chọn?')) {
            var action = '@Url.Action("UpdateYGrades","MoodleQuiz")' + '/?quizid=' + @ViewBag.QuizID + '&selectedVals=' + selectedVals
            processing(action, "Đang cập nhật điểm mới cho các học viên...", gridRefresh);
        }
    })
</script>

