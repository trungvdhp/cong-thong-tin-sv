@using Kendo.Mvc.UI;
@using CongThongTinSV.Models;
@{
    ViewBag.Title = ViewBag.FullName + ": Bảng điểm các khóa học bạn đã ghi danh";
}
<h2>Bảng điểm các khóa học bạn đã ghi danh</h2>
@(Html.Kendo().Grid<CongThongTinSV.Models.MoodleStudentCourseGrade>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(c => c.Lop_hoc_phan)
            .ClientTemplate((@Html.ActionLink("#=Lop_hoc_phan#", "MyQuizGrade", "MoodleQuiz", new { courseid = "CourseId" }, new { title = "Xem bảng điểm các bài thi của tôi" }).ToHtmlString().Replace("CourseId", "#=ID#")));
        columns.Bound(c => c.Diem)
            .Width(120)
            .ClientTemplate(
                (@Html.ActionLink("#= kendo.toString(Diem, '0.0') #", "MyCourseStudentGrade", "MoodleCourse", new { courseid = "CourseID" }, new { title = "Xem bảng điểm tổng kết khóa học" })).ToHtmlString().Replace("CourseID", "#=ID#"));
        columns.Bound(c => c.Ky_hieu).Width(95).HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.So_tin_chi).Width(90);
        columns.Bound(c => c.Hoc_ky).Width(75).Hidden();
        columns.Bound(c => c.Nam_hoc).Width(90).Hidden();
    })
    .Pageable(pager => pager.PageSizes(new int[] { 5, 10, 20, 50 }).Refresh(true).Input(true).Numeric(false).Messages(m => { m.ItemsPerPage("dòng mỗi trang"); m.First("Trang đầu tiên"); m.Last("Trang cuối cùng"); m.Next("Trang sau"); m.Previous("Trang trước"); m.Refresh("Làm mới"); }))
    .Sortable(s => s.SortMode(GridSortMode.SingleColumn))
    .Filterable()
    .Scrollable()
    .Groupable(group => group.Enabled(false))
    .Resizable(r => r.Columns(true))
    .Reorderable(ro => ro.Columns(true))
    //.HtmlAttributes(new { style="height:auto"})
    .ColumnMenu(menu => menu.Enabled(true).Sortable(false))
    .Selectable(s => s.Mode(GridSelectionMode.Single))
    .DataSource(
        dataSource => dataSource
            .Ajax()
            .Group(group => group.Add(diem => diem.Nam_hoc))
            .Group(group => group.Add(diem => diem.Hoc_ky))
            .Read(read => read.Action("GetMyCourseGrades", "MoodleCourse"))
            .PageSize(50)
    )
    .Events(e =>
    {
        e.Change("onChange");
        e.DataBound("onDataBound");
    })
)

<h2 id="coursename">Danh sách thành viên</h2>
@(Html.Kendo().Grid<CongThongTinSV.Models.MoodleCourseMember>()
    .Name("MemberGrid")
    .Columns(columns => {
        columns.Bound(c => c.ImageUrl)
            .Sortable(false)
            .Groupable(false)
            .Filterable(false)
            .HeaderHtmlAttributes(new { style = "text-align: center;" })
            .HtmlAttributes(new { style = "text-align: center;" })
            .ClientTemplate("<a href='../MoodleUser/UserCourseProfile/?userid=#=UserID#&courseid=#=get_courseid()#'>" +
                    "<img src=#=ImageUrl# alt='Picture of #=FullName#' title='Ảnh đại diện của #=FullName#' />" + 
                    "</a>"
                    )
            .Width(120);
        columns.Bound(c => c.FullName)
            .ClientTemplate(
                (@Html.ActionLink("#=FullName#", "UserCourseProfile", "MoodleUser", new { userid = "UserID", courseid = "CourseID" }, new { title = "Xem hồ sơ khóa học của #=FullName#" })).ToHtmlString().Replace("CourseID", "#=get_courseid()#").Replace("UserID","#=UserID#"))
                .Width(180);
        columns.Bound(c => c.City).Width(150);
        columns.Bound(c => c.Country).Width(100);
        columns.Bound(c => c.LastAccess).Width(150);
        columns.Bound(c => c.Roles).HtmlAttributes(new { style = "color: blue;"});
        
    })
    .Pageable(pager => pager.PageSizes(new int[]{5, 10, 20, 50}).Refresh(true).Input(true).Numeric(false).Messages(m =>{ m.ItemsPerPage("dòng mỗi trang"); m.First("Trang đầu tiên"); m.Last("Trang cuối cùng"); m.Next("Trang sau"); m.Previous("Trang trước"); m.Refresh("Làm mới");}))
    .Sortable(s => s.SortMode(GridSortMode.SingleColumn))
    .Filterable()
    .Scrollable()
    //.Groupable()
    .Resizable(r => r.Columns(true))
    .Reorderable(ro => ro.Columns(true))
    .Navigatable()
    //.HtmlAttributes(new { style="height:auto"})
    //.ColumnMenu(menu => menu.Enabled(true).Sortable(false))
    //.Selectable(s => s.Mode(GridSelectionMode.Single))
    .DataSource(
        dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("GetCourseMembers", "MoodleCourse").Data("filterGrid"))
            .PageSize(50)
    )
    .Events(e =>
    {
        e.DataBound("onDataBoundMember");
    })
)

<script type="text/javascript">
    var courseID = "0";

    function get_courseid() {
        return courseID;
    }

    function filterGrid() {
        return {
            courseid: courseID
        }
    }

    function onDataBound(e) {
        resizeGrid("#Grid");
    }

    function onDataBoundMember(e) {
        resizeGrid("#MemberGrid");
    }

    function onChange(arg) {
        var course = this.select();
        courseID = this.dataItem(course).ID;
        document.getElementById('coursename').innerHTML = this.dataItem(course).Lop_hoc_phan + " - Danh sách thành viên";
        $("#MemberGrid").data("kendoGrid").dataSource.read();
    }
</script>