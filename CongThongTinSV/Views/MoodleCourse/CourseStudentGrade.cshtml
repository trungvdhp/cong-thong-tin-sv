@using Kendo.Mvc.UI;
@using CongThongTinSV.Models;

@{
    ViewBag.Title = ViewBag.CourseName + ": Bảng điểm tổng kết";
}
<h2>@ViewBag.Title</h2>
<button id="exportToExcel" class="k-button" onclick="exportToExcel()">Xuất ra Excel</button>
<button id="exportToPdf" class="k-button" onclick="exportToPdf()">Xuất ra Pdf</button>
@(Html.Kendo().Grid<CongThongTinSV.Models.MoodleCourseStudentGrade>()
    .Name("Grid")
    .Columns(columns =>
    {
        //columns.Bound(c => c.ID)
        //    .ClientTemplate("<input type='checkbox' class='chkbx' value='#= ID #'/>")
        //    .HeaderTemplate("<input type='checkbox' id='masterCheckBox'/>")
        //    .Width(40)
        //    .Title("")
        //    .HeaderHtmlAttributes(new { style = "text-align:center" })
        //    .HtmlAttributes(new { style = "text-align:center" })
        //    .Filterable(false).Groupable(false).Sortable(false);
        columns.Bound(c => c.Ma_sv)
            .Title("Mã sinh viên")
            .Width(115)
            .HtmlAttributes(new { style = "text-align:center" })
            .ClientTemplate((@Html.ActionLink("#=Ma_sv#", "UserCourseProfile", "MoodleUser", new { userid = "UserID", courseid = ViewBag.CourseID }, new { title = 
"Xem hồ sơ khóa học" }).ToHtmlString().Replace("UserID", "#=ID#")));
        columns.Bound(c => c.Ho_dem).Width(140);
        columns.Bound(c => c.Ten).Width(80);
        columns.Bound(c => c.Ngay_sinh).Width(100).Format("{0:dd-MM-yyyy}").HtmlAttributes(new { style = "text-align:center" });
        columns.Bound(c => c.Lop).Width(90);
        columns.Bound(c => c.DiemZ).Format("{0:0.0}");
    })
    .Pageable(pager => pager.PageSizes(new int[] { 5, 10, 20, 50, 80 }).Refresh(true).Input(true).Numeric(false).Messages(m =>{ m.ItemsPerPage("dòng mỗi trang"); m.First("Trang đầu tiên"); m.Last("Trang cuối cùng"); m.Next("Trang sau"); m.Previous("Trang trước"); m.Refresh("Làm mới");}))
    .Sortable(s => s.SortMode(GridSortMode.SingleColumn))
    .Filterable()
    .Scrollable()
    .Groupable()
    .Resizable(r => r.Columns(true))
    .Reorderable(ro => ro.Columns(true))
    .Navigatable()
    .HtmlAttributes(new { style="height:400px"})
    //.ColumnMenu(menu => menu.Enabled(true).Sortable(false))
    //.Selectable(s => s.Mode(GridSelectionMode.Single))
    .Events(e =>
    {
        e.DataBound("onDataBound");
    })
    .DataSource(
        dataSource => dataSource
            .Ajax()
            .Read(read => read.Action("GetCourseStudentGrades", "MoodleCourse", new { courseid = ViewBag.CourseID }))
            .PageSize(50)
    )
    //.ToolBar(toolbar => toolbar.Custom().Text("Xuất ra excel").Url("#").HtmlAttributes(new { onclick = "exportToExcel()", style= "float:right;"}))
)
<div style="text-align: center;margin-top: 10px;">
    <button class="k-button" type="submit" onclick="pageback()">Quay về danh sách các khóa học</button>
</div>
<script type="text/javascript">
    //var selectedVals = [];
    var requestObject;

    //export to excel
    function exportToExcel() {
        document.location.href = '@Url.Action("ExportCourseGradeToExcel", "MoodleCourse")' + '/?sort=' + requestObject.sort + '&filter=' + requestObject.filter + '&courseid=@ViewBag.CourseID' + '&coursename=' + '@HttpUtility.UrlEncode(ViewBag.CourseName)';
    }

    //export to pdf
    function exportToPdf() {
        document.location.href = '@Url.Action("ExportCourseGradeToPdf", "MoodleCourse")' + '/?sort=' + requestObject.sort + '&filter=' + requestObject.filter + '&courseid=@ViewBag.CourseID' + '&coursename=' + '@HttpUtility.UrlEncode(ViewBag.CourseName)';
    }

    // on data bound, check checkboxes
    function onDataBound(e) {
        //checkCells(selectedVals, '#masterCheckBox', '#Grid :checkbox');

        // ask the parameterMap to create the request object for you
        var grid = $('#Grid').data('kendoGrid');
        requestObject = (new kendo.data.transports["aspnetmvc-server"]({ prefix: "" }))
        .options.parameterMap({
            page: grid.dataSource.page(),
            sort: grid.dataSource.sort(),
            filter: grid.dataSource.filter()
        });
    }

    // on click checkbox cell in a row
    //$(function () {
    //    $('#Grid').on('click', '.chkbx', function () {
    //        var state = $(this).is(':checked');
    //        var grid = $('#Grid').data().kendoGrid;
    //        var dataItem = grid.dataItem($(this).closest('tr'));

    //        checkVal(dataItem.ID, state, selectedVals);
    //        $('#masterCheckBox').attr('checked', isCheckedAll('#Grid :checkbox'));
    //    })
    //})

    //$('#masterCheckBox').click(function () { checkAll(this, '#Grid :checkbox'); })

    //function gridRefresh() {
    //    $("#Grid").data("kendoGrid").dataSource.read();
    //}
</script>
